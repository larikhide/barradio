---
openapi: "3.0.2"
info:
  title: Barradio - music service
  description: The service allows bar/cafe patrons to vote for the style of music  
  version: "0.1.0"
tags:
  - name: health
    description: Endpoints to check server health
  - name: voting
    description: Vote for the music style or get results
  - name: playback
    description: Track/compositions detailed info
servers:
  - url: https://barradio.herokuapp.com
    description: demo server
paths:
  # health
  /api/hello:
    get:
      tags:
        - health
      summary: Just hello to be sure that the server is alive
      responses:
        "200":
          description: Hello message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseError"

  # voting service
  /api/voting/category:
    get:
      tags:
        - voting
      summary: Returns a list of categories for voting, such as sentiment/genre/etc
      responses:
        "200":
          description: List of categories to choose
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VoteCategory"
  /api/voting/choice:
    post:
      tags:
        - voting
      summary: Sends user choice to server
      requestBody:
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/VoteCategory"
      responses:
        "201":
          description: New vote saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteResult"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseError"
  /api/voting/result/current:
    get:
      tags:
        - voting
      summary: Returns summary of voting for current (unfinished yet) interval
      responses:
        "200":
          description: Top of categories by last voting
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteResult"
  /api/voting/result/last:
    get:
      tags:
        - voting
      summary: Returns summary of voting
      responses:
        "200":
          description: Top of categories by last voting
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteResult"
  /api/voting/result/history:
    get:
      tags:
        - voting
      summary: Returns detailed report of voting
      parameters:
        - in: query
          name: start
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: All voting results by defined timedelta
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VoteResult"

  # playback service
  /api/playback/compositions/{category_name}:
    get:
      tags:
        - playback
      summary: Returns a list of tracks for selected category
      parameters:
        - in: path
          name: category_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Compositions for defined category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Composition"
        "404":
          description: Category did not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseError"
  /api/playback/topvoted/playlist/compositions:
    get:
      tags:
        - playback
      summary: Returns a list of tracks for category-winner of last user voting
      responses:
        "200":
          description: Compositions category-winner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Composition"
        "500":
          description: Cannot get voting winner (no any votes)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseError"
  /api/playback/topvoted/playlist:
    get:
      tags:
        - playback
      summary: Returns a playlist containing tracks for category-winner of last user voting
      responses:
        "200":
          description: Playlist related to category-winner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Playlist"
        "500":
          description: Cannot get voting winner (no any votes)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseError"
      

components:
  schemas:
    BaseError:
      type: object
      properties:
        message: 
          type: string
    VoteCategory:
      type: object
      properties:
        name:
          type: string
    VoteResult:
      type: object
      properties:
        datetime:
          type: string
          format: date-time
        total: 
          type: number
        results:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              score:
                type: number
    Composition:
      type: object
      properties:
        singer:
          type: string
        name:
          type: string
        image_url:
          type: string
        composition_url:
          type: string
        duration_sec:
          type: number
    Playlist:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        total_tracks:
          type: number
        duration:
          type: number
