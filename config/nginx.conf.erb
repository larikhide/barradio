daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout 5;

	upstream app_server {
		server localhost:8123 fail_timeout=0;
	}

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;

		location / {
			# Uncomment this if statement to force SSL/redirect http -> https
			if ($http_x_forwarded_proto != "https") {
				return 301 https://$host$request_uri;
			}

			autoindex on;    
			alias web/static/;
		}

		location /api {
			error_page 475 = @proxy_to_app;
			return 475;
		}

		location @proxy_to_app {
			# handle CORS
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' <%= ENV['NGINX_ALLOWED_HOSTS'] || '*' %>;
			 	add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			 	#
			 	# Custom headers and headers various browsers *should* be OK with but aren't
			 	#
			 	add_header 'Access-Control-Allow-Headers' 'User-Agent,X-Requested-With,Content-Type,Range,Origin';
			 	#
			 	# Tell client that this pre-flight info is valid for 20 days
			 	#
			 	add_header 'Access-Control-Max-Age' 1728000;
			 	add_header 'Content-Type' 'text/plain; charset=utf-8';
			 	add_header 'Content-Length' 0;
			 	return 204;
			}
			if ($request_method = 'POST') {
			 	add_header 'Access-Control-Allow-Origin' <%= ENV['NGINX_ALLOWED_HOSTS'] || '*' %> always;
			 	add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			 	add_header 'Access-Control-Allow-Headers' 'User-Agent,X-Requested-With,Content-Type,Range,Origin' always;
			 	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			}
			if ($request_method = 'GET') {
			 	add_header 'Access-Control-Allow-Origin' <%= ENV['NGINX_ALLOWED_HOSTS'] || '*' %> always;
			 	add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			 	add_header 'Access-Control-Allow-Headers' 'User-Agent,X-Requested-With,Content-Type,Range,Origin' always;
			 	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			}

			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_pass http://app_server;
		}
	}
}
